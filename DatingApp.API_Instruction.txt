=> dotnet --info
=> dotnet new -h
=> dotnet new -n DatingApp.API
=> dotnet run (Walking Skeleton) runnable API Project
=> Create a Model folder
	-> Create a Value.cs class
=> Create a Data folder
	-> Create a DataContext.cs class (Inherite from DbContext class) and create a constructor 
		
tutorial 6=> 10.9sec


==> UI Generate
=> ng new DatingAppUI
=> add some necessary extension
=> Add HttpClientModule to app.module.ts and import it
=> In StartUp.cs file add cores for support the browser
=> Add a User table and add-migration and update-database

tutorial 12. Token Authentication 1.31 Min

End of sec 4

=> Error handle

End of sec 5

=> Use Alertify for notification -> npm i alertifyjs
=> Use authO angular jwt -> npm install @auth0/angular-jwt
=> Use ngx-bootstrap for dropdown, because we do not use jquery -> npm install ngx-bootstrap --save
=> Use bootswatch for themes.

End of sec 6

=> Create a routermodule in angular project for routing and add import it on app.module.ts
=> create a guard -> ng g guard auth --skipTest
End of sec 7

=> Extend user entity and add a ICollection property for Photo
=> dotnet entity framework migration operation -> If, do not add two prop(User, UserId) in photo entity it will operate photo table deletion as resticded.
	but if we add this two prop the it will use cascading deletion.
=> Use DTO(Data Transfer Object) for getting shaped data.
=> Use automapper for map in the Api Controller
	-> Install package Microsoft.Aspnetcore.Automapper
	-> Inject the IMapper to Api Controller
	-> Use Map() method
	-> Add a class AutoMapperProfile and Inherit from Profile class, and use CreateMap<SourceClass, DestinationClass>();

End of sec 8

=> designing the members card
	-> inside card add buttons
=> designing the member details page, add router link for details, and use ? as safe navigator oparator in the details page so that the console error doesent show.
=> Use ngx-tabsmodule for the tabing of member details
=> Use ngx-gallery for members photo gallery

End of sec 9

=> Edit profile page designed
=> Generate another guard to prevent unsaved canges lost
=> Edit api created in api project

End of sec 10

=> Use Cloudinary for storing photos in cloud
	-> In appsetting file configure the cloudinary
=> Create Post Api and Photos Controller, add CloudinaryDotNet packege to the project and configure the api through it.
=> Add a packege in angular for file upload npm i ng2-file-upload
=> Add necessary code in both frontend and backend
=> Add main photo feature by updating a field with post api
=> Add navbar photo option from login controller by passing an extra object in response
=> Use behavior subject for MainPhotoUrl
=> Delete photo feature added
	-> Make an api in photos controller
	-> Create a service in userservice.ts and from member-edit component apply the deletion
	-> In deletion use splice to remove from array

End of sec 11

=> Use Reactive form in registration form and add validation

End of sec 12

=> Use TimeAgoPipe in some component
=> Use action filter for update last active time
	-> Make a new class in Helper folder LogUserActivity

End of sec 13
continue from tutorial 6