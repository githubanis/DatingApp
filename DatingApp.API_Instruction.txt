=> dotnet --info
=> dotnet new -h
=> dotnet new -n DatingApp.API
=> dotnet run (Walking Skeleton) runnable API Project
=> Create a Model folder
	-> Create a Value.cs class
=> Create a Data folder
	-> Create a DataContext.cs class (Inherite from DbContext class) and create a constructor 
		
tutorial 6=> 10.9sec


==> UI Generate
=> ng new DatingAppUI
=> add some necessary extension
=> Add HttpClientModule to app.module.ts and import it
=> In StartUp.cs file add cores for support the browser
=> Add a User table and add-migration and update-database

tutorial 12. Token Authentication 1.31 Min

End of sec 4

=> Error handle

End of sec 5

=> Use Alertify for notification -> npm i alertifyjs
=> Use authO angular jwt -> npm install @auth0/angular-jwt
=> Use ngx-bootstrap for dropdown, because we do not use jquery -> npm install ngx-bootstrap --save
=> Use bootswatch for themes.

End of sec 6

=> Create a routermodule in angular project for routing and add import it on app.module.ts
=> create a guard -> ng g guard auth --skipTest
End of sec 7

=> Extend user entity and add a ICollection property for Photo
=> dotnet entity framework migration operation -> If, do not add two prop(User, UserId) in photo entity it will operate photo table deletion as resticded.
	but if we add this two prop the it will use cascading deletion.
=> Use DTO(Data Transfer Object) for getting shaped data.
=> Use automapper for map in the Api Controller
	-> Install package Microsoft.Aspnetcore.Automapper
	-> Inject the IMapper to Api Controller
	-> Use Map() method
	-> Add a class AutoMapperProfile and Inherit from Profile class, and use CreateMap<SourceClass, DestinationClass>();
End of sec 8